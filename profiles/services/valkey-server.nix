{
  inputs,
  globals,
  config,
  pkgs,
  lib,
  ...
}:
let
  host = config.node.name;
  nebulaIp = globals.nebula.mesh.hosts.${host}.ipv4;

  masterNode = "athena";
  masterNebulaIp = globals.nebula.mesh.hosts.${masterNode}.ipv4;

  isMaster = host == masterNode;
in
{

  environment.systemPackages = with pkgs; [ valkey ];

  users.groups.redis = { };
  users.users.redis = {
    isSystemUser = true;
    group = "redis";
  };

  # Persist Valkey data
  environment.persistence."/persist".directories = lib.singleton {
    directory = "/var/lib/redis-server";
    mode = "0700";
    user = "redis";
    group = "redis";
  };

  age.secrets.valkey-server-password = {
    rekeyFile = inputs.self.outPath + "/secrets/generated/valkey-server-password.age";
    generator.script = "alnum";
    owner = config.services.redis.servers.server.user;
  };

  age.secrets.valkey-sentinel-password = {
    rekeyFile = inputs.self.outPath + "/secrets/generated/valkey-sentinel-password.age";
    generator.script = "alnum";
    owner = config.services.redis.servers.sentinel.user;
  };

  # Configure both Redis server and Sentinel instances
  services.redis = {
    package = pkgs.valkey;

    servers = {
      server = {
        enable = true;
        user = "redis";

        port = 6379;
        bind = nebulaIp;

        requirePassFile = config.age.secrets.valkey-server-password.path;

        settings = {
          maxmemory = "256m";
          maxmemory-policy = "allkeys-lru";
          replica-read-only = "yes";
          replicaof = lib.mkIf (!isMaster) "${masterNebulaIp} 6379";
        };
      };

      # Sentinel instance for automatic failover
      sentinel = {
        user = "redis";
        enable = true;
        port = 26379;
        bind = nebulaIp;
        extraParams = [ "--sentinel" ];

        requirePassFile = config.age.secrets.valkey-sentinel-password.path;

        settings = {
          sentinel = [
            "monitor mymaster ${masterNebulaIp} 6379 2"
            "down-after-milliseconds mymaster 30000"
            "failover-timeout mymaster 180000"
            "parallel-syncs mymaster 1"
          ];
        };
      };
    };
  };

  systemd.services.redis-server = {
    serviceConfig.ExecStartPre = lib.mkAfter [
      (
        "+"
        + pkgs.writeShellScript "redis-masterauth" ''
          {
            echo -n "masterauth "
            cat ${config.age.secrets.valkey-server-password.path}
          } >> "/run/redis-server/nixos.conf"
        ''
      )
    ];
  };

  systemd.services.redis-sentinel = {
    serviceConfig.ExecStartPre = lib.mkAfter [
      (
        "+"
        + pkgs.writeShellScript "redis-sentinel-auth-pass" ''
          # We delete the dynamic config section that Redis Sentinel generates, in order to
          # always use this config as source of truth. Essentialy, redis sentinel will take
          # our whole config, and adds that content to /var/lib/redis-sentinel/redis.conf,
          # so we can't manage it anymore, so we delete it.
          sed -i '/# Generated by CONFIG REWRITE/,$d' /var/lib/redis-sentinel/redis.conf
          {
            echo -n "sentinel auth-pass mymaster "
            cat ${config.age.secrets.valkey-server-password.path}
          } >> "/run/redis-sentinel/nixos.conf"
        ''
      )
    ];
  };

  consul.services = {
    redis =
      let
        inherit (config.services.redis.servers.server) port bind;
      in
      {
        name = "redis";
        inherit port;

        check = {
          tcp = "${bind}:${toString port}";
          interval = "10s";
          timeout = "2s";
        };

        tags = [ "server" ];
      };

    redis-sentinel =
      let
        inherit (config.services.redis.servers.sentinel) port bind;
      in
      {
        name = "redis";
        inherit port;

        check = {
          tcp = "${bind}:${toString port}";
          interval = "10s";
          timeout = "2s";
        };

        tags = [ "sentinel" ];
      };
  };

  globals.nebula.mesh.hosts.${host}.firewall.inbound = [
    {
      inherit (config.services.redis.servers.server) port;
      proto = "tcp";
      group = "any";
    }
    {
      inherit (config.services.redis.servers.sentinel) port;
      proto = "tcp";
      group = "any";
    }
  ];
}
